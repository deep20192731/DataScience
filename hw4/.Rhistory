g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
plot(g1)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,1, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,1,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,1, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,1,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
plot(g1)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,1, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 1,0,1,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
plot(g1)
cor(betweeness1, closeness1)
closeness1
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,1, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,1,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
plot(g1)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
plot(g1)
m1 = matrix(c(1,0,0,0,0,0,1, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
plot(g1)
m1 = matrix(c(1,1,0,0,0,0,1, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = FALSE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
m1 = matrix(c(1,1,0,0,0,0,1, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
plot(g1)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,0,0,0, 0,0,1,1,1,1,0, 0,0,0,0,1,0,0, 0,0,0,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
plot(g1)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
betweeness1
closeness1
cor(betweeness1, closeness1)
plot(g1)
m2 = matrix(c(1,1,0,1,1,1,1, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g2 <- graph.adjacency(m2, mode = "undirected")
g2 <- simplify(g2)
betweeness2 <- estimate_betweenness(g2, vids = V(g2), directed = TRUE, cutoff=3)
closeness2 <- estimate_closeness(g2, vids = V(g2), mode = c("out", "in", "all", "total"), cutoff=3)
V(g2)$name <- V(g2)
V(g2)$degree <- degree(g2)
cat("\nBelow are the betweenness and closeness for the above matrix along with the graph.\n")
betweeness2
closeness2
cor(betweeness2, closeness2)
plot(g2)
length(manualTag)
sum(tweetsSaved$isRetweet == TRUE)
sum(tweetsSaved$retweeted == FALSE)
TRUE
sum(tweetsSaved$retweeted == TRUE)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
cat("\nBelow are the betweenness and closeness for the above matrix along with the graph.\n")
betweeness1
closeness1
cor(betweeness1, closeness1)
plot(g1)
plot(g1)
m2 = matrix(c(1,1,0,1,1,1,1, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g2 <- graph.adjacency(m2, mode = "undirected")
g2 <- simplify(g2)
betweeness2 <- estimate_betweenness(g2, vids = V(g2), directed = TRUE, cutoff=3)
closeness2 <- estimate_closeness(g2, vids = V(g2), mode = c("out", "in", "all", "total"), cutoff=3)
V(g2)$name <- V(g2)
V(g2)$degree <- degree(g2)
cat("\nBelow are the betweenness and closeness for the above matrix along with the graph. Here Node 4 has low betweenness but high closeness\n")
betweeness2
closeness2
cor(betweeness2, closeness2)
plot(g2)
length(manualTag)
profilePics = c()
for(i in 146:300) {
sN = tweetsSaved[i,]$screenName
userObj = getUser(sN)
profilePics[i] = userObj$profileImageUrl
}
api_key <- "6asTMtTCU0yLB0qQUp0gfWSsE"
api_secret <- "Y5im7P2XyKkehjf7x0UUc0KywFCgtmP0Z1a4gRr77V2CX1350Z"
token <- "704837312492892160-GAII5np9jGX8SBWYAo34108Y3MoB5cI"
token_secret <- "0axCw7tf9VGwzNydgQIMW4s5j5CWCHIA9E8L0IOxNCJlZ"
setup_twitter_oauth(api_key, api_secret, token, token_secret)
for(i in 146:300) {
sN = tweetsSaved[i,]$screenName
userObj = getUser(sN)
profilePics[i] = userObj$profileImageUrl
}
profilePics
moreManualTags <- c(NA, "F", "F", "F", "M", "M", "M", NA, "F", "M", "M", "F", "F", "F", "F", NA, NA, NA, "M", NA, "F", "M", "F", "F", "M", "M", NA, "M", NA, "F", "F", "F", "F", "F", NA, NA, NA, NA, "M", "M", NA, "M", "M", "F", "M", "M", "F", "F", "M", NA, "M", "F", "F", "F", "M", "F", NA, "F", "F", "M", "M", "F", "M", "M", "M", NA, NA)
length(moreManualTags)
sum(is.na(moreManualTags))
rev(moreManualTags)
sum(is.na(moreManualTags))
moreManualTags <- c(NA, "F", "F", "F", "M", "M", "M", NA, "F", "M", "M", "F", "F", "F", "F", NA, NA, NA, "M", NA, "F", "M", "F", "F", "M", "M", NA, "M", NA, "F", "F", "F", "F", "F", NA, NA, NA, NA, "M", "M", NA, "M", "M", "F", "M", "M", "F", "F", "M", NA, "M", "F", "F", "F", "M", "F", NA, "F", "F", "M", "M", "F", "M", "M", "M", NA, NA, NA, NA, "M", "M", "M", "F", "M", "M", "F", "F", NA, "F", "M", "F", "F", "F", "M", NA, "M", "F", "F", "M", "M", "F", "M", "M", NA, "M", "M", NA, NA, NA, NA,  "F", "F", "F", "F", "F", NA, "M", NA,  "M", "M", "F", "F", "M", "F", NA, "M", NA, NA, NA, "F", "F", "F", "F", "M", "M", "F", NA, "M", "M", "M", "F", "F", "F", NA)
length(moreManualTags)
sum(is.na(moreManualTags))
moreManualTags = append(manualTag, moreManualTags)
moreManualTags
length(moreManualTags)
sum(is.na(moreManualTags))
trainText = subset(tweetsSaved$text, !is.na(tweetsSaved$gender))
length(trainSet)
length(trainText)
trainText = subset(tweetsSaved$text, !is.na(tweetsSaved$gender))
length(trainText)
gender <- rep(NA, nrow(tweetsSaved)) # base gender array
for(i in 1:length(moreManualTags)) {
if(!is.na(moreManualTags[i])) {
gender[i] = moreManualTags[i]
}
}
tweetsSaved$gender <- gender
trainText = subset(tweetsSaved$text, !is.na(tweetsSaved$gender))
length(trainText)
trainTweetsOutput = as.factor(subset(tweetsSaved$gender, !is.na(tweetsSaved$gender)))
length(trainTweetsOutput)
TwoGramDTM = generateDocumentTermMatrix(trainText, 2)
TwoGramFeatures = TwoGramDTM$dimnames$Terms
TwoGramDF <- data.frame(trainTweetsOutput, as.data.frame(inspect(TwoGramDTM)))
TwoGramModel <- svm(trainTweetsOutput~., data=TwoGramDF, type = 'C-classification', kernel = 'linear', cross = 5)
paste(findFreqTerms(TwoGramDTM, 6))
plot(TwoGramModel$fitted)
summary(TwoGramModel)
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
cat("\nBelow are the betweenness and closeness for the above matrix along with the graph.\n")
paste(betweeness1)
paste(closeness1)
cor(betweeness1, closeness1)
plot(g1)
plot(g1)
m2 = matrix(c(1,1,0,1,1,1,1, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g2 <- graph.adjacency(m2, mode = "undirected")
g2 <- simplify(g2)
betweeness2 <- estimate_betweenness(g2, vids = V(g2), directed = TRUE, cutoff=3)
closeness2 <- estimate_closeness(g2, vids = V(g2), mode = c("out", "in", "all", "total"), cutoff=3)
V(g2)$name <- V(g2)
V(g2)$degree <- degree(g2)
cat("\nBelow are the betweenness and closeness for the above matrix along with the graph. Here Node 4 has low betweenness but high closeness\n")
paste(betweeness2)
paste(closeness2)
cor(betweeness2, closeness2)
plot(g2)
genderN <- rep(NA, nrow(tweetsSaved)) # base gender array
for(i in 1:length(moreManualTags)) {
if(!is.na(moreManualTags[i])) {
genderN[i] = moreManualTags[i]
}
}
tweetsSaved$gender <- genderN
trainText = subset(tweetsSaved$text, !is.na(tweetsSaved$gender))
outputs = as.factor(subset(tweetsSaved$gender, !is.na(tweetsSaved$gender)))
BiGramDTM = generateDocumentTermMatrix(trainText, 2)
BiGramFeatures = BiGramDTM$dimnames$Terms
BiGramDF <- data.frame(outputs, as.data.frame(inspect(BiGramDTM)))
BiGramModel <- svm(outputs~., data=BiGramDF, type = 'C-classification', kernel = 'linear', cross = 5)
paste(findFreqTerms(BiGramDTM, 6))
plot(BiGramModel$fitted)
summary(BiGramModel)
TwoGramDTM = generateDocumentTermMatrix(tweetsText, 2)
TwoGramFeatures = TwoGramDTM$dimnames$Terms
TwoGramDF <- data.frame(trainTweetsOutput, as.data.frame(inspect(TwoGramDTM)))
TwoGramModel <- svm(trainTweetsOutput~., data=TwoGramDF, type = 'C-classification', kernel = 'linear', cross = 5)
paste(findFreqTerms(TwoGramDTM, 6))
plot(TwoGramModel$fitted)
summary(TwoGramModel)
paste(findFreqTerms(BiGramDTM, 7))
paste(findFreqTerms(BiGramDTM, 8))
OneGramDTM = generateDocumentTermMatrix(tweetsText, 1)
OneGramFeatures = OneGramDTM$dimnames$Terms
OneGramDF <- data.frame(trainTweetsOutput, as.data.frame(inspect(OneGramDTM)))
OneGramDF <- as.data.frame(trainTweetsOutput, as.data.frame(inspect(OneGramDTM)))
OneGramDF <- data.frame(trainTweetsOutput, as.data.frame(inspect(OneGramDTM)))
OneGramDF = data.frame(trainTweetsOutput, as.data.frame(inspect(OneGramDTM)))
<-
OneGramDF <- data.frame(trainTweetsOutput, as.data.frame(inspect(OneGramDTM)))
as.data.frame(inspect(OneGramDTM))
as.data.frame(OneGramDTM)
as.matrix(OneGramDTM)
a = as.data.frame(as.matrix(OneGramDTM))
c = data.frame(trainTweetsOutput, as.matrix(OneGramDTM))
c
tweetsSaved <- read.csv("1000tweets.csv", stringsAsFactors = FALSE)
gender <- rep(NA, nrow(tweetsSaved)) # base gender array
manualTag <- c("F", NA, NA, "F", "F", "M", "M", "F", NA, NA, NA, NA, NA, "M", "F", "M", "M", "M", NA,
"M", "F", NA, NA, "F", "F", "M", "F", "F", NA, NA, "F", "F", NA, "M", NA, "M", "F", "F",
"F", "F", "F", "F", "F", "F", NA, NA, "M", "F", "F", "F", NA, NA, "F", "M", NA, "F", "F",
NA, "F", NA, "F", NA, "M", "M", NA, "F", "F", "F", "F", "F", "M", NA, NA, "F", "M", "F",
"M", NA, "M", "M", NA, "F", "F", "F", NA, "F", "M", "F", "F", NA, NA, NA, "F", NA, "M",
"M", "M", "M", "M", "M", "F", NA, "F", "M", "M", "F", "M", NA, NA, "M", "M", "M", "M", "M",
"F", "M", "M", "M", NA, NA, "M", "F", "F", NA, "F", "F", NA, "M", "F", "M", NA, NA, NA, "M"
, "F", NA, NA, "M", "F", NA, "M", "F", "M", "F", "F")
for(i in 1:length(manualTag)) {
if(!is.na(manualTag[i])) {
gender[i] = manualTag[i]
}
}
tweetsSaved$gender <- gender
tweetsText = subset(tweetsSaved$text, !is.na(tweetsSaved$gender))
trainTweetsOutput = as.factor(subset(tweetsSaved$gender, !is.na(tweetsSaved$gender)))
testTweetsSet = subset(tweetsSaved$text, is.na(tweetsSaved$gender))
```{r echo=FALSE}
tweetsText = subset(tweetsSaved$text, !is.na(tweetsSaved$gender))
trainTweetsOutput = as.factor(subset(tweetsSaved$gender, !is.na(tweetsSaved$gender)))
testTweetsSet = subset(tweetsSaved$text, is.na(tweetsSaved$gender))
cat("\nStemming: We do stemming for each word. So every word in every tweet is stemmed to its base version. Example 'running' to 'run'\n")
cat("\nCase: All words are converted to lower-case before being made as features for SVM\n")
cat("\nPunctuations: All punctuations are ignored\n")
cat("\nOther Words: All stop words, whitespaces and numbers are also removed\n")
cat("\nNext we need to construct n-grams specifically 1-gram, 2-grams and 3-grams as features and feed them to SVM Classifier\n")
cat("\nBefore going any furthur, it should be noted that the tweets are extracted for hash-tag #Election2016\n")
cat("\nFirst we create the the model using uni-grams. Below are the top-8 frequent uni-grams in training set and the plot for prediction on training set\n")
OneGramDTM = generateDocumentTermMatrix(tweetsText, 1)
OneGramFeatures = OneGramDTM$dimnames$Terms
OneGramDF <- as.data.frame(trainTweetsOutput, as.matrix(OneGramDTM))
View(OneGramDF)
OneGramDF <- data.frame(trainTweetsOutput, as.matrix(OneGramDTM))
View(OneGramDF)
OneGramModel <- svm(trainTweetsOutput~., data=OneGramDF, type = 'C-classification', kernel = 'linear', cross=5)
paste(findFreqTerms(OneGramDTM, 8))
plot(OneGramModel$fitted)
cat("\nNext we create the model for bi-grams. Below is the prediction on training set and the most frequent tri-grams\n")
TwoGramDTM = generateDocumentTermMatrix(tweetsText, 2)
TwoGramFeatures = TwoGramDTM$dimnames$Terms
TwoGramDF <- data.frame(trainTweetsOutput, as.matrix(TwoGramDTM))
TwoGramModel <- svm(trainTweetsOutput~., data=TwoGramDF, type = 'C-classification', kernel = 'linear', cross = 5)
paste(findFreqTerms(TwoGramDTM, 6))
plot(TwoGramModel$fitted)
cat("\nFinally we create the model for tri-grams. Below is the prediction on training set and the most frequent tri-grams\n")
ThreeGramDTM = generateDocumentTermMatrix(tweetsText, 3)
ThreeGramFeatures = ThreeGramDTM$dimnames$Terms
ThreeGramDF <- data.frame(trainTweetsOutput, as.matrix(ThreeGramDTM))
ThreeGramModel <- svm(trainTweetsOutput~., data=ThreeGramDF, type = 'C-classification', kernel = 'linear', cross = 5)
paste(findFreqTerms(ThreeGramDTM, 6))
plot(ThreeGramModel$fitted)
cat("\nThese features are from all uni-gram, bi-gram, tri-gram models, We show 5 Unigrams, 3 Bi-Grams and 2 Tri-Grams\n")
cat("\nBelow are some common features for Women\n")
wUniForWomen <- sort(as.data.frame(t(OneGramModel$coefs[1:OneGramModel$nSV[1]]) %*% OneGramModel$SV[1:OneGramModel$nSV[1], ]), decreasing = TRUE)
wBiForWomen <- sort(as.data.frame(t(TwoGramModel$coefs[1:TwoGramModel$nSV[1]]) %*% TwoGramModel$SV[1:TwoGramModel$nSV[1], ]), decreasing = TRUE)
wTriForWomen <- sort(as.data.frame(t(ThreeGramModel$coefs[1:ThreeGramModel$nSV[1]]) %*% ThreeGramModel$SV[1:ThreeGramModel$nSV[1], ]), decreasing = TRUE)
featuresForWomen = append(append(wUniForWomen[1:5], wBiForWomen[1:3]), wTriForWomen[1:2])
paste(names(featuresForWomen))
cat("\nBelow are some common features for Men\n")
wUniForMen <- sort(as.data.frame(t(OneGramModel$coefs[OneGramModel$nSV[1]:OneGramModel$tot.nSV]) %*% OneGramModel$SV[OneGramModel$nSV[1]:OneGramModel$tot.nSV, ]), decreasing = TRUE)
wBiForMen <- sort(as.data.frame(t(TwoGramModel$coefs[TwoGramModel$nSV[1]:TwoGramModel$tot.nSV]) %*% TwoGramModel$SV[TwoGramModel$nSV[1]:TwoGramModel$tot.nSV, ]), decreasing = TRUE)
wTriForMen <- sort(as.data.frame(t(ThreeGramModel$coefs[ThreeGramModel$nSV[1]:ThreeGramModel$tot.nSV]) %*% ThreeGramModel$SV[ThreeGramModel$nSV[1]:ThreeGramModel$tot.nSV, ]), decreasing = TRUE)
featuresForMen = append(append(wUniForMen[1:5], wBiForMen[1:3]), wTriForMen[1:2])
paste(names(featuresForMen))
cat("\nTo evaluate the model, we use 5-fold cross validation technique since we do not have enough data points for a 80:20 split\n")
cat("\nBelow is the summary of accuracies of uni-gram model\n")
summary(OneGramModel)
cat("\nBelow is the summary of accuracies of bi-gram model\n")
summary(TwoGramModel)
cat("\nBelow is the summary of accuracies of tri-gram model\n")
summary(ThreeGramModel)
cat("\nHere we manually tag 100 more tweets and run bi-gram classifier since that was shown to be better than uni-gram and tri-grams classifiers\n")
moreManualTags <- c(NA, "F", "F", "F", "M", "M", "M", NA, "F", "M", "M", "F", "F", "F", "F", NA, NA, NA, "M", NA, "F", "M", "F", "F", "M", "M", NA, "M", NA, "F", "F", "F", "F", "F", NA, NA, NA, NA, "M", "M", NA, "M", "M", "F", "M", "M", "F", "F", "M", NA, "M", "F", "F", "F", "M", "F", NA, "F", "F", "M", "M", "F", "M", "M", "M", NA, NA, NA, NA, "M", "M", "M", "F", "M", "M", "F", "F", NA, "F", "M", "F", "F", "F", "M", NA, "M", "F", "F", "M", "M", "F", "M", "M", NA, "M", "M", NA, NA, NA, NA,  "F", "F", "F", "F", "F", NA, "M", NA,  "M", "M", "F", "F", "M", "F", NA, "M", NA, NA, NA, "F", "F", "F", "F", "M", "M", "F", NA, "M", "M", "M", "F", "F", "F", NA)
moreManualTags = append(manualTag, moreManualTags)
genderN <- rep(NA, nrow(tweetsSaved)) # base gender array
for(i in 1:length(moreManualTags)) {
if(!is.na(moreManualTags[i])) {
genderN[i] = moreManualTags[i]
}
}
tweetsSaved$gender <- genderN
trainText = subset(tweetsSaved$text, !is.na(tweetsSaved$gender))
outputs = as.factor(subset(tweetsSaved$gender, !is.na(tweetsSaved$gender)))
BiGramDTM = generateDocumentTermMatrix(trainText, 1)
BiGramDTM = generateDocumentTermMatrix(trainText, 1)
BiGramFeatures = BiGramDTM$dimnames$Terms
BiGramDF <- data.frame(outputs, as.matrix(BiGramDTM))
BiGramModel <- svm(outputs~., data=BiGramDF, type = 'C-classification', kernel = 'linear', cross = 5)
paste(findFreqTerms(BiGramDTM, 8))
plot(BiGramModel$fitted)
summary(BiGramModel)
paste(m1)
paste(g)
paste(m1)
print. matrix(m1)
print.matrix(m1)
print.matrix(m1)
print.char.matrix(m1)
install.packages("base")
install.packages("base")
library(base)
print.char.matrix(m1)
print.char.matrix(list(m1))
print(m1)
paste(cor(betweeness1, closeness1))
paste("Corelation between betweenness and closeness centrality = ", cor(betweeness1, closeness1))
paste("Corelation between betweenness and closeness centrality = ", cor(betweeness2, closeness2))
knitr::opts_chunk$set(echo = TRUE)
load("TDM.RData", verbose = TRUE)
setwd("~/Documents/nyu/fall2016/datascience/hw4")
setwd("~/Documents/nyu/fall2016/datascience/hw4")
load("TDM.RData", verbose = TRUE)
load("TDM.RData", verbose = TRUE)
load("TDM.RData")
linkedinMat <- as.matrix(termDocMatrix)
linkedinMat[linkedinMat>=1] <- 1 # converting to binary matrix values. 0 indicates no edge
linkedinMat <- linkedinMat %*% t(linkedinMat) # Adjacency Matrix
mat <- linkedinMat %*% t(linkedinMat)
matr <- linkedinMat %*% t(linkedinMat)
g <- graph.adjacency(matr, mode = "undirected")
summary(g)
g <- simplify(g)
V(g)$label <- V(g)$name
V(g)$degree <- degree(g)
layout1 <- layout.fruchterman.reingold(g)
plot(g, layout=layout1)
print(matr)
betweens <- sort(estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff=3), decreasing = TRUE)
paste(names(betweens)[1:5])
paste(betweens[1:5])
cat("\nBelow are the words with highest closeness centrality measures\n")
closes <- sort(estimate_closeness(g, vids = V(g), mode = c("out", "in", "all", "total"), cutoff=2), decreasing = TRUE)
paste(names(closes)[1:5])
paste(closes[1:5])
betweens <- sort(estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff=2), decreasing = TRUE)
paste(names(betweens)[1:5])
paste(betweens[1:5])
cat("\nBelow are the words with highest closeness centrality measures\n")
closes <- sort(estimate_closeness(g, vids = V(g), mode = c("out", "in", "all", "total"), cutoff=2), decreasing = TRUE)
paste(names(closes)[1:5])
paste(closes[1:5])
betweens <- sort(estimate_betweenness(g, vids = V(g), directed = FALSE, cutoff=4), decreasing = TRUE)
paste(names(betweens)[1:5])
paste(betweens[1:5])
cat("\nBelow are the words with highest closeness centrality measures\n")
closes <- sort(estimate_closeness(g, vids = V(g), mode = c("out", "in", "all", "total"), cutoff=2), decreasing = TRUE)
paste(names(closes)[1:5])
paste(closes[1:5])
measures <- data.frame(V(g)$name, betweeness, closes)
plot(measures[2:3])
cor(dfForMeasures[2:3])
m1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g1 <- graph.adjacency(m1, mode = "undirected")
g1 <- simplify(g1)
betweeness1 <- estimate_betweenness(g1, vids = V(g1), directed = TRUE, cutoff=3)
closeness1 <- estimate_closeness(g1, vids = V(g1), mode = c("out", "in", "all", "total"), cutoff=3)
V(g1)$name <- V(g1)
V(g1)$degree <- degree(g1)
print(m1)
cat("\nBelow are the betweenness and closeness for the above matrix along with the graph.\n")
paste(betweeness1)
paste(closeness1)
paste("Corelation between betweenness and closeness centrality = ", cor(betweeness1, closeness1))
plot(g1)
m2 = matrix(c(1,1,0,1,1,1,1, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
g2 <- graph.adjacency(m2, mode = "undirected")
g2 <- simplify(g2)
betweeness2 <- estimate_betweenness(g2, vids = V(g2), directed = TRUE, cutoff=3)
closeness2 <- estimate_closeness(g2, vids = V(g2), mode = c("out", "in", "all", "total"), cutoff=3)
V(g2)$name <- V(g2)
V(g2)$degree <- degree(g2)
print(m2)
cat("\nBelow are the betweenness and closeness for the above matrix along with the graph. Here Node 4 has low betweenness but high closeness\n")
paste(betweeness2)
paste(closeness2)
paste("Corelation between betweenness and closeness centrality = ", cor(betweeness2, closeness2))
plot(g2)
paste(betweeness[1:5])
paste(names(betweeness)[1:5])
paste(names(closeness)[1:5])
mat1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
ga1 <- graph.adjacency(mat1, mode = "undirected")
ga1 <- simplify(ga1)
bet1 <- estimate_betweenness(ga1, vids = V(ga1), directed = TRUE, cutoff=3)
co1 <- estimate_closeness(ga1, vids = V(ga1), mode = c("out", "in", "all", "total"), cutoff=3)
V(ga1)$name <- V(ga1)
V(ga1)$degree <- degree(ga1)
print(ma1)
print(mat1)
paste(bet1)
paste(co1)
plot(ga1)
mat2 = matrix(c(1,0,0,1,1,1,0, 0,1,1,0,0,0,0, 0,1,1,1,1,1,0, 0,0,1,1,1,1,0, 0,0,1,0,1,0,0, 0,0,0,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
ga2 <- graph.adjacency(mat2, mode = "undirected")
ga2 <- simplify(ga2)
bet2 <- estimate_betweenness(ga2, vids = V(ga2), directed = TRUE, cutoff=3)
co2 <- estimate_closeness(ga2, vids = V(ga2), mode = c("out", "in", "all", "total"), cutoff=3)
V(ga2)$name <- V(ga2)
V(ga2)$degree <- degree(ga2)
print(mat2)
paste(bet2)
paste(co2)
plot(ga2)
mat1 = matrix(c(1,0,0,0,0,0,0, 0,1,1,0,0,0,0, 0,1,1,0,1,1,0, 0,0,1,1,1,1,0, 0,0,0,0,1,0,0, 0,0,1,0,0,1,0, 0,0,0,0,0,0,0), nrow = 7, ncol = 7)
ga1 <- graph.adjacency(mat1, mode = "undirected")
ga1 <- simplify(ga1)
bet1 <- estimate_betweenness(ga1, vids = V(ga1), directed = TRUE, cutoff=3)
co1 <- estimate_closeness(ga1, vids = V(ga1), mode = c("out", "in", "all", "total"), cutoff=3)
V(ga1)$name <- V(ga1)
V(ga1)$degree <- degree(ga1)
print(mat1)
cat("\nBetween ness list for the above matrix\n")
paste(bet1)
cat("\nClose ness list for the above matrix\n")
paste(co1)
plot(ga2)
