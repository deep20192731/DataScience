knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/deepeshnathani/Documents/nyu/fall2016/datascience/hw5")
# Process Data
healthData <- read.csv("Health_Data.csv", stringsAsFactors = FALSE)
colnames(healthData) <- c("Start", "Finish", "Steps")
healthData$Steps <- as.numeric(healthData$Steps)
# strptime takes - not /
healthData$Start <- gsub("/", "-", healthData$Start)
healthData$Finish <- gsub("/", "-", healthData$Finish)
healthData$Start <- as.POSIXct(strptime(healthData$Start, "%m-%d-%y %H:%M"))
healthData$Finish <- as.POSIXct(strptime(healthData$Finish, "%m-%d-%y %H:%M"))
healthData[1,]
healthData[1,1]
healthData[1,]
healthData[1,1]
d1 <- as.POSIXlt(healthData$Start,format = "%m/%d/%Y %H:%M")
d2<- as.POSIXlt(healthData$Finish,format = "%m/%d/%Y %H:%M")
healthData$Start<-d1
healthData$Finish<-d2
aggregateMonthly<- aggregate(healthData$StepsCount, list(month=substr(healthData$Finish,1,7)), sum)
d1 <- as.POSIXlt(healthData$Start,format = "%m/%d/%Y %H:%M")
d2<- as.POSIXlt(healthData$Finish,format = "%m/%d/%Y %H:%M")
healthData$Start<-d1
healthData$Finish<-d2
aggregateMonthly<- aggregate(healthData$StepsCount, list(month=substr(healthData$Finish,1,7)), sum)
View(healthData)
d1 <- as.POSIXlt(healthData$Start,format = "%m/%d/%Y %H:%M")
healthData$Start<-d1
d2<- as.POSIXlt(healthData$Finish,format = "%m/%d/%Y %H:%M")
healthData$Finish<-d2
aggregateMonthly<- aggregate(healthData$StepsCount, list(month=substr(healthData$Finish,1,7)), sum)
aggregateMonthly<- aggregate(healthData$Steps, list(month=substr(healthData$Finish,1,7)), sum)
colnames(aggregateMonthly)<-c("Month","StepCount")
temp<- as.yearmon(aggregateMonthly$Month)
install.packages("zoo")
library(zoo)
aggregateMonthly<- aggregate(healthData$Steps, list(month=substr(healthData$Finish,1,7)), sum)
colnames(aggregateMonthly)<-c("Month","StepCount")
temp<- as.yearmon(aggregateMonthly$Month)
aggregateMonthly$Month<-temp
plot(aggregateMonthly,type="l")
plot(healthData$Steps, type = "l")
plot.ts(healthData)
plot.ts(healthData$Steps)
plot.ts(healthData$Steps, labels = "asd")
plot.ts(healthData$Steps)
heathTimeSeries = ts(healthData, frequency = 12)
plot(healthTimeSeries)
heathTimeSeries = ts(healthData, frequency = 12)
plot(healthTimeSeries)
healthTimeSeries = ts(healthData, frequency = 12)
plot(healthTimeSeries)
healthTimeSeries = ts(aggregateMonthly, frequency = 12)
plot(healthTimeSeries)
plot(healthTimeSeries$StepCount)
frequency(healthTimeSeries)
length(healthTimeSeries)
plot(aggregateMonthly)
barplot(aggregateMonthly)
View(aggregateMonthly)
a = table
a = table(aggregateMonthly)
barplot(a)
plot(aggregateMonthly,type="l")
plot(aggregateMonthly,type="l")
healthTimeSeries <-ts(aggregateMonthly, frequency = 12)
decomposedSeries <- decompose(healthTimeSeries)
plot(decomposedSeries)
View(aggregateMonthly)
healthTimeSeries <-ts(aggregateMonthly$StepCount, frequency = 12, start = 2)
plot(healthTimeSeries)
healthTimeSeries <-ts(aggregateMonthly$StepCount, frequency = 12, start = c(2015, 2))
plot(healthTimeSeries)
healthTimeSeries <-ts(aggregateMonthly$StepCount, frequency = 12, start = c(15, 2))
plot(healthTimeSeries)
healthTimeSeries <-ts(aggregateMonthly$StepCount, frequency = 12, start = c(2015, 2)) # start = Feb,2015
decomposedSeries <- decompose(healthTimeSeries)
healthTimeSeries <-ts(aggregateMonthly$StepCount, frequency = 12, start = c(2015, 2)) # start = Feb,2015
decomposedSeries <- decompose(healthTimeSeries)
decomposedSeries <- decompose(healthTimeSeries)
healthTimeSeries <-ts(aggregateMonthly$StepCount, frequency = 12) # start = Feb,2015
decomposedSeries <- decompose(healthTimeSeries)
gnp <- ts(cumsum(1 + round(rnorm(100), 2)),
start = c(1954, 7), frequency = 12)
plot(gnp) # using 'plot.ts' for time-series plot
a = cumsum(1 + round(rnorm(100), 2))
a
length(a)
nrow(aggregateMonthly)
nrow(aggregateMonthly$StepCount)
length(aggregateMonthly$StepCount)
a = substr(healthData$Finish,1,7))
a = substr(healthData$Finish,1,7)
a
a = ggregateMonthly<- aggregate(healthData$Steps, list(month=substr(healthData$Finish,1,10)), sum)
a
plot(a)
plot(a$x)
plot(a$x, type="l")
a = ggregateMonthly<- aggregate(healthData$Steps, list(month.abb=substr(healthData$Finish,1,10)), sum)
healthTimeSeries <-ts(aggregateMonthly, frequency = 12) # start = Feb,2015
decomposedSeries <- decompose(healthTimeSeries)
plot(decomposedSeries$seasonal)
plot(decomposedSeries)
plot(decomposedSeries$x)
plot(decomposedSeries$seasonal)
plot(decomposedSeries$trend)
plot(decomposedSeries$random)
plot(decomposedSeries$random)
plot(decomposedSeries$figure)
plot(decomposedSeries$type)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/deepeshnathani/Documents/nyu/fall2016/datascience/hw2")
# All package includes go here
library(forecast)
# Read all data and convert to time-series in this block
seriesData <- scan("jojo.dat")
timeSeriesData <- ts(seriesData, frequency = 4)
plot(timeSeriesData,
xlab = "Quarter",
ylab = "Earnings/Share")
cat("Length= ", length(timeSeriesData), ("(this is the total number of observations)"))
cat("Frequency= ", frequency(timeSeriesData), "(since data is recorded once per quarter)")
cat("We use the decompose function to split the series in different components. As we see that the magnitude of seasonality increases every quarter. This implies that series is multiplicative, to change it to additive we take the log of the original series\n")
decomposedData <- decompose(log(timeSeriesData))
seasonalComponent <- decomposedData$seasonal
trendComponent <- decomposedData$trend
cat("Below are the plots for Observed+Trend+Seasonal+Residual components\n")
plot(decomposedData, xlab = "Quarter")
cat("Below is the plot of stationary time-series after removing trend and seasonal component\n")
deTrendedData <- diff(log(timeSeriesData))
residualData <- deTrendedData - seasonalComponent
plot(residualData, xlab = "Quarter", ylab="Residual-Value")
seriesData
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/deepeshnathani/Documents/nyu/fall2016/datascience/hw5")
# All library installs and includes go here.
# install.packages("zoo")
library(zoo)
# Process Data
healthData <- read.csv("Health_Data.csv", stringsAsFactors = FALSE)
colnames(healthData) <- c("Start", "Finish", "Steps")
healthData$Steps <- as.numeric(healthData$Steps)
# strptime takes - not /
healthData$Start <- gsub("/", "-", healthData$Start)
healthData$Finish <- gsub("/", "-", healthData$Finish)
healthData$Start <- as.POSIXct(strptime(healthData$Start, "%m-%d-%y %H:%M"))
healthData$Finish <- as.POSIXct(strptime(healthData$Finish, "%m-%d-%y %H:%M"))
d1 <- as.POSIXlt(healthData$Start,format = "%m/%d/%Y %H:%M")
d2<- as.POSIXlt(healthData$Finish,format = "%m/%d/%Y %H:%M")
healthData$Start<-d1
healthData$Finish<-d2
aggregateMonthly<- aggregate(healthData$Steps, list(month=substr(healthData$Finish,1,7)), sum)
colnames(aggregateMonthly)<-c("Month","StepCount")
temp<- as.yearmon(aggregateMonthly$Month)
aggregateMonthly$Month<-temp
plot(aggregateMonthly,type="l")
cat("\nAbove is the line-graph plot aggregated monthly. The underlying data is a Time-Series Data.\nLine graph is very useful here to see trend and seasonality patterns.\n Below bar plot can ")
a = healthData$Steps
b = ts
b = ts(a, frequency = 365)
plot(b)
plot(b, type = "l")
plot(b, type = "l")
c = decompose(b)
plot(c)
length(a)
365*24
b = ts(a, frequency = 8760)
c = decompose(b)
install.packages("xts")
library(xts)
a = as.numeric( format(healthData$Finish+3, "%U"))
a
a = apply.weekly(healthData, sum)
a = healthData
a$Start <- NULL
b = apply.weekly(a, sum)
b = apply.daily(a, sum)
View(a)
a$Finish <- substr(a$Finish, 1, 10)
View(a)
a$Finish <- as.Date(a$Finish)
b = apply.daily(a, sum)
b = apply.weekly(a, sum)
table(a)
b = aggregate(a$Steps, a$Finish)
b = aggregate(a$Steps, a$Finish, sum)
b = aggregate(a$Steps, list(daily = a$Finish), sum)
View(b)
plot(b)
plot(b, type="l")
c = apply.weekly(b, sum)
c = ts(b)
c = apply.weekly(c, sum)
c = as.xts(b)
b$daily
b$daily[1]
typeof(b$daily[1])
as.Date(b$daily[1])
typeof(as.Date(b$daily[1]))
dailyData <- healthData
dailyData$Start <- NULL
dailyData$Finish <- as.Date(substr(dailyData$Finish, 1, 10))
dailyData = ts(dailyData)
frequency(dailyData)
dailyData = ts(dailyData, frequency = 365)
plot(dailyData)
plot(dailyData$Steps)
dailyData = aggregate(dailyData$Steps, list(daily = dailyData$Finish), sum)
dailyData <- healthData
dailyData$Start <- NULL
dailyData$Finish <- as.Date(substr(dailyData$Finish, 1, 10))
dailyData = aggregate(dailyData$Steps, list(daily = dailyData$Finish), sum)
plot(dailyData, type = "l")
View(dailyData)
b
c = decompose(b)
dailyTS = ts(dailyData, frequency = 365.25)
plot.ts(dailyTS)
plot.ts(dailyTS$x)
dailyTS = ts(dailyData, start = c(2015, 2, 16), frequency = 365.25)
plot.ts(dailyTS$x)
plot.ts(dailyTS)
decomposedDaily = decompose(dailyTS)
plot(decomposedDaily)
View(dailyData)
dailyTS = ts(dailyData$x, start = c(2015, 2, 16), frequency = 365.25)
decomposedDaily = decompose(dailyTS)
?ts
View(dailyData)
train=xts(dailyData$x,as.Date(dailyData$daily,format='%y-%m/%d'),frequency=365.25)
View(train)
data_ts=as.ts(train)
dcomp=decompose(data_ts,type=c('additive'))
dcomp=decompose(data_ts)
dfts <- as.ts(xts(df[1:4], order.by=df$date))
dfts <- as.ts(xts(dailyData$x, order.by=dailyData$daily))
c = decompose(dfts)
dfts <- ts(dfts, frequency=12)
c = decompose(dfts)
plot(c)
dfts <- ts(dfts, frequency=365)
c = decompose(dfts)
